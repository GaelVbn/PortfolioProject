SELECT * FROM NashvilleHousing


-----------------------------
-- Standardize Date Format --
-----------------------------


SELECT
    SaleDate,
    TRY_CONVERT(DATE, SaleDate) AS ConvertedSaleDate
FROM
    NashvilleHousing;

UPDATE NashvilleHousing
SET SaleDate = TRY_CONVERT(DATE, SaleDate)


-----------------------------------
-- Populate Property Adress data --
-----------------------------------


SELECT a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress, b.PropertyAddress)
FROM PortfolioProject..NashvilleHousing a
JOIN PortfolioProject..NashvilleHousing b
ON a.ParcelID = b.ParcelID
AND a.[UniqueID] <> b.[UniqueID]
WHERE a.PropertyAddress IS NULL

UPDATE a
SET PropertyAddress = ISNULL(a.PropertyAddress, b.PropertyAddress)
FROM PortfolioProject..NashvilleHousing a
JOIN PortfolioProject..NashvilleHousing b
ON a.ParcelID = b.ParcelID
AND a.[UniqueID] <> b.[UniqueID]
WHERE a.PropertyAddress IS NULL


---------------------------------------------------------------------
-- Breaking Address Into Individual Columns (Address, City, State) --
---------------------------------------------------------------------


Select PropertyAddress FROM NashvilleHousing

SELECT
    SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) - 1) AS AddressPart1,
    SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1, LEN(PropertyAddress)) AS AddressPart2
FROM
    PortfolioProject.dbo.NashvilleHousing
WHERE
    CHARINDEX(',', PropertyAddress) > 0;

ALTER TABLE NashvilleHousing
add PropertySplitAddress NVARCHAR(255);

UPDATE NashvilleHousing
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) - 1)
WHERE
    CHARINDEX(',', PropertyAddress) > 0;

ALTER TABLE NashvilleHousing
add PropertySplitCity NVARCHAR(255);

UPDATE NashvilleHousing
SET PropertySplitCity = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1, LEN(PropertyAddress))
WHERE
    CHARINDEX(',', PropertyAddress) > 0;

SELECT * FROM PortfolioProject..NashvilleHousing

SELECT OwnerAddress 
FROM NashvilleHousing

SELECT
PARSENAME(REPLACE(OwnerAddress, ',', '.'), 3),
PARSENAME(REPLACE(OwnerAddress, ',', '.'), 2),
PARSENAME(REPLACE(OwnerAddress, ',', '.'), 1)
FROM NashvilleHousing

ALTER TABLE NashvilleHousing
add OwnerSplitAddress NVARCHAR(255);

UPDATE NashvilleHousing
SET OwnerSplitAddress = PARSENAME(REPLACE(OwnerAddress, ',', '.'), 3)
WHERE
    CHARINDEX(',', OwnerAddress) > 0;

ALTER TABLE NashvilleHousing
add OwnerSplitCity NVARCHAR(255);

UPDATE NashvilleHousing
SET OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress, ',', '.'), 2)
WHERE
    CHARINDEX(',', OwnerAddress) > 0;

ALTER TABLE NashvilleHousing
add OwnerSplitState NVARCHAR(255);

UPDATE NashvilleHousing
SET OwnerSplitState = PARSENAME(REPLACE(OwnerAddress, ',', '.'), 1)
WHERE
    CHARINDEX(',', OwnerAddress) > 0;

SELECT * FROM NashvilleHousing


------------------------------------------------------------
-- Change Y and N to Yes and No in "Sold as Vacant" field --
------------------------------------------------------------


SELECT distinct(SoldAsVacant), COUNT(SoldAsVacant) FROM NashvilleHousing
GROUP BY SoldAsVacant
Order by 2

select SoldAsVacant,
CASE WHEN SoldAsVacant = 'Y' then 'YES'
WHEN SoldAsVacant = 'N' then 'NO'
ELSE SoldAsVacant
END
FROM NashvilleHousing

UPDATE NashvilleHousing
SET SoldAsVacant = CASE WHEN SoldAsVacant = 'Y' then 'YES'
WHEN SoldAsVacant = 'N' then 'NO'
ELSE SoldAsVacant
END


-----------------------
-- Remove Duplicates --
-----------------------


WITH RowNumCTE AS (
SELECT *,
ROW_NUMBER() OVER (
    PARTITION BY ParcelID, PropertyAddress, SalePrice, SaleDate, LegalReference ORDER BY UniqueID
) row_num
FROM PortfolioProject..NashvilleHousing

)
DELETE FROM RowNumCTE
WHERE row_num > 1 


---------------
--- DELETE ----
---------------


ALTER TABLE NashvilleHousing
DROP COLUMN OwnerAddress, TaxDistrict, PropertyAddress, SaleDate